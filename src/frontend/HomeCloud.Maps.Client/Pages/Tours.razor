@page "/tours"

@attribute [Authorize]

@inject IWebAPIClient Client
@inject NavigationManager Navigation

<MudToolBar Class="mb-15">
    <MudText Typo="Typo.h6">Tours</MudText>
    <MudToolBarSpacer />
    <MudTextField @bind-Value="searchString"
                  Placeholder="Search"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  IconSize="Size.Small"
                  Class="mt-n5" />
    <MudToolBarSpacer />
    <Pagination @ref="@paginationComponent"
                PageChangedEvent="@UpdateTourInfosPage"
                Total="@(page is null ? 0 : page.Total)" />
</MudToolBar>

<MudGrid>
    @if (page is null)
    {
        @foreach (var i in Enumerable.Range(1, 10))
        {
            <MudItem xs="6">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle"
                             Height="125px"/>
            </MudItem>
        }
    }
    else
    {
        @foreach (var tour in page.Data)
        {
            <MudItem xs="6">
                <MudLink Underline="Underline.None"
                         Href="@($"/tours/{tour.TourId}")">
                    <MudPaper Elevation="3"
                              Class="pa-5">
                            <MudToolBar>
                                <img src="@(CreateImageUrl(tour.ImageUrl))" class="ml-n5">
                                <div class="ml-5">
                                    <MudText Typo="Typo.h6" Class="mt-n3">@tour.Name</MudText>
                                    <div class="ml-2">
                                        <MudText>Date: @(tour.Date.ToString())</MudText>
                                        <MudText>Distance:  @(tour.Distance)</MudText>
                                    </div>
                                </div>
                                <MudToolBarSpacer/>
                            </MudToolBar>
                    </MudPaper>
                </MudLink>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private string searchString;
    private TourInfoDtoPaginationResult page;


    private Pagination paginationComponent;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTourInfosPage();
    }

    private async Task UpdateTourInfosPage()
    {
        page = null;

        var pageTask = Client.SendAsync(
            x => x.GetTourInfosPaginationAsync(paginationComponent.PageSize, paginationComponent.PageIndex));
        var delayTask = Task.Delay(1000);

        await Task.WhenAll(pageTask, delayTask);

        page = pageTask.Result;
    }

    private string CreateImageUrl(string url)
        => url.Replace("{width}", "100")
              .Replace("{height}", "100")
              .Replace("&crop={crop}", string.Empty);
}
