@page "/tours"

@attribute [Authorize]

@inject IWebAPIClient Client
@inject NavigationManager Navigation

<MudToolBar Class="mb-15">
    <MudText Typo="Typo.h6">Tours</MudText>
    <MudToolBarSpacer />
    <MudTextField @bind-Value="searchString"
                  Placeholder="Search"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  IconSize="Size.Small"
                  Class="mt-n5" />
    <MudToolBarSpacer />
    <Pagination @ref="@paginationComponent"
                PageChangedEvent="@UpdateTourInfosPage"
                Total="@(page is null ? 0 : page.Total)"/>
</MudToolBar>


@if (page is null)
{
    @foreach (var i in Enumerable.Range(1, 10))
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" 
                     Height="75px" 
                     Class="ma-5"/>
    }
}
else
{
    @foreach (var tour in page.Data)
    {
        <MudPaper Elevation="3" 
                  Class="ma-5">
            <MudButton Variant="Variant.Text" Style="margin: 10px" OnClick="@(() => OnTourClicked(tour.TourId))">
                @tour.Name
            </MudButton>
        </MudPaper>
    }
}

@code {
    private string searchString;
    private TourInfoDtoPaginationResult page;


    private Pagination paginationComponent;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTourInfosPage();
    }

    private void OnTourClicked(string tourId)
    {
        Navigation.NavigateTo($"/tours/{tourId}");
    }

    private async Task UpdateTourInfosPage()
    {
        await Task.Delay(2000);
        page = await Client.SendAsync(
            x => x.GetTourInfosPaginationAsync(paginationComponent.PageSize, paginationComponent.PageIndex));
    }
}
