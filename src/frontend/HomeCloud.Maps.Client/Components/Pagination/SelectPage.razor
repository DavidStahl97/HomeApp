@namespace HomeCloud.Maps.Client.Components

<MudText Typo="Typo.body2" Class="mud-table-pagination-caption">
    Rows per Page
</MudText>

<span style="width: 75px" class="ml-3 mr-5">
    <MudSelect T="int"
               Class="mud-table-pagination-select"
               DisableUnderLine="true"
               Dense="true"
               Value="@Pagination.PageSize"
               ValueChanged="@OnPageSizeChanged">
        @foreach (var pageItem in new List<int> { 10, 25, 50, 100 })
        {
            <MudSelectItem Value="@pageItem" />
        }
    </MudSelect>
</span>

<MudText Typo="Typo.body2"
         Class="mud-table-pagination-caption"
         Style="width: 100px">
    @CurrentSelectedPage
</MudText>

<div class="mud-table-pagination-actions">
    <MudIconButton Icon="@Icons.Material.Filled.FirstPage"
                   @onclick="@OnSelectFirstPage"
                   Disabled="@(Pagination.PageIndex == 0)" />
    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore"
                   @onclick="@OnSelectBeforePage"
                   Disabled="@(Pagination.PageIndex == 0)" />
    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext"
                   @onclick="@OnSelectNextPage"
                   Disabled="(Pagination.PageIndex == LastPageIndex)" />
    <MudIconButton Icon="@Icons.Material.Filled.LastPage"
                   @onclick="@OnSelectLastPage"
                   Disabled="(Pagination.PageIndex == LastPageIndex)" />
</div>

@code {
    [CascadingParameter]
    public PaginationInfo Pagination { get; set; }

    [Parameter]
    public EventCallback PageChangedEvent { get; set; }

    private string CurrentSelectedPage
        => $"{FirstElementOfPage}-{LastElementOfPage} of {Pagination.Total}";

    private int LastElementOfPage
        => Pagination.PageIndex == LastPageIndex ? Pagination.Total : Pagination.PageIndex * Pagination.PageSize + Pagination.PageSize;

    private int FirstElementOfPage
        => Pagination.Total == 0 ? 0 : Pagination.PageIndex * Pagination.PageSize + 1;

    private int LastPageIndex => (Pagination.Total - 1) / Pagination.PageSize;

    private async Task OnSelectFirstPage()
    {
        Pagination.PageIndex = 0;
        await PageChangedEvent.InvokeAsync();
    }

    private async Task OnSelectNextPage()
    {
        Pagination.PageIndex++;
        await PageChangedEvent.InvokeAsync();
    }

    private async Task OnSelectBeforePage()
    {
        Pagination.PageIndex--;
        await PageChangedEvent.InvokeAsync();
    }

    private async Task OnSelectLastPage()
    {
        Pagination.PageIndex = LastPageIndex;
        await PageChangedEvent.InvokeAsync();
    }

    private async Task OnPageSizeChanged(int pageSize)
    {
        Pagination.PageIndex = 0;
        Pagination.PageSize = pageSize;
        await PageChangedEvent.InvokeAsync();
    }
}
